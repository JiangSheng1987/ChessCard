/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.game.ActionRequest');
goog.provide('proto.game.ActionResponse');
goog.provide('proto.game.Card');
goog.provide('proto.game.Fold');
goog.provide('proto.game.PromptResponse');
goog.provide('proto.game.PromptResponse.Prompt');
goog.provide('proto.game.ReadyHandResponse');
goog.provide('proto.game.ReconnectResponse');
goog.provide('proto.game.ReconnectResponse.Player');
goog.provide('proto.game.SettleForRoomResponse');
goog.provide('proto.game.SettleForRoomResponse.PlayerData');
goog.provide('proto.game.SettleForRoundResponse');
goog.provide('proto.game.SettleForRoundResponse.PlayerData');
goog.provide('proto.game.WinFlag');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.Card = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.Card, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.Card.displayName = 'proto.game.Card';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.Card.prototype.toObject = function(opt_includeInstance) {
  return proto.game.Card.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.Card} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.Card.toObject = function(includeInstance, msg) {
  var f, obj = {
    card: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.Card}
 */
proto.game.Card.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.Card;
  return proto.game.Card.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.Card} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.Card}
 */
proto.game.Card.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.game.Card} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.Card.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.Card.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.Card.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCard();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 card = 1;
 * @return {number}
 */
proto.game.Card.prototype.getCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.game.Card.prototype.setCard = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.ReconnectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.game.ReconnectResponse.repeatedFields_, null);
};
goog.inherits(proto.game.ReconnectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.ReconnectResponse.displayName = 'proto.game.ReconnectResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.game.ReconnectResponse.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.ReconnectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.game.ReconnectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.ReconnectResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.ReconnectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    kwargs: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ownerUuid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    roomStatus: jspb.Message.getFieldWithDefault(msg, 4, 0),
    currentRound: jspb.Message.getFieldWithDefault(msg, 5, 0),
    dealer: jspb.Message.getFieldWithDefault(msg, 6, 0),
    activeSeat: jspb.Message.getFieldWithDefault(msg, 7, 0),
    discardSeat: jspb.Message.getFieldWithDefault(msg, 8, 0),
    restCards: jspb.Message.getFieldWithDefault(msg, 9, 0),
    cardDraw: jspb.Message.getFieldWithDefault(msg, 10, 0),
    playerList: jspb.Message.toObjectList(msg.getPlayerList(),
    proto.game.ReconnectResponse.Player.toObject, includeInstance),
    code: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.ReconnectResponse}
 */
proto.game.ReconnectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.ReconnectResponse;
  return proto.game.ReconnectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.ReconnectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.ReconnectResponse}
 */
proto.game.ReconnectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKwargs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerUuid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentRound(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDealer(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiveSeat(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiscardSeat(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRestCards(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCardDraw(value);
      break;
    case 11:
      var value = new proto.game.ReconnectResponse.Player;
      reader.readMessage(value,proto.game.ReconnectResponse.Player.deserializeBinaryFromReader);
      msg.addPlayer(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.game.ReconnectResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.ReconnectResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.ReconnectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.ReconnectResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRoomId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getKwargs();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getOwnerUuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getRoomStatus();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getCurrentRound();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getDealer();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getActiveSeat();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = this.getDiscardSeat();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = this.getRestCards();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = this.getCardDraw();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = this.getPlayerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.game.ReconnectResponse.Player.serializeBinaryToWriter
    );
  }
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
};


/**
 * optional uint32 room_id = 1;
 * @return {number}
 */
proto.game.ReconnectResponse.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.game.ReconnectResponse.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string kwargs = 2;
 * @return {string}
 */
proto.game.ReconnectResponse.prototype.getKwargs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.game.ReconnectResponse.prototype.setKwargs = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string owner_uuid = 3;
 * @return {string}
 */
proto.game.ReconnectResponse.prototype.getOwnerUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.game.ReconnectResponse.prototype.setOwnerUuid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 room_status = 4;
 * @return {number}
 */
proto.game.ReconnectResponse.prototype.getRoomStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.game.ReconnectResponse.prototype.setRoomStatus = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 current_round = 5;
 * @return {number}
 */
proto.game.ReconnectResponse.prototype.getCurrentRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.game.ReconnectResponse.prototype.setCurrentRound = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 dealer = 6;
 * @return {number}
 */
proto.game.ReconnectResponse.prototype.getDealer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.game.ReconnectResponse.prototype.setDealer = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 active_seat = 7;
 * @return {number}
 */
proto.game.ReconnectResponse.prototype.getActiveSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.game.ReconnectResponse.prototype.setActiveSeat = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 discard_seat = 8;
 * @return {number}
 */
proto.game.ReconnectResponse.prototype.getDiscardSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.game.ReconnectResponse.prototype.setDiscardSeat = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 rest_cards = 9;
 * @return {number}
 */
proto.game.ReconnectResponse.prototype.getRestCards = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.game.ReconnectResponse.prototype.setRestCards = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint32 card_draw = 10;
 * @return {number}
 */
proto.game.ReconnectResponse.prototype.getCardDraw = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.game.ReconnectResponse.prototype.setCardDraw = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * repeated Player player = 11;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.ReconnectResponse.Player>}
 */
proto.game.ReconnectResponse.prototype.getPlayerList = function() {
  return /** @type{!Array.<!proto.game.ReconnectResponse.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.ReconnectResponse.Player, 11));
};


/** @param {!Array.<!proto.game.ReconnectResponse.Player>} value */
proto.game.ReconnectResponse.prototype.setPlayerList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.game.ReconnectResponse.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.ReconnectResponse.Player}
 */
proto.game.ReconnectResponse.prototype.addPlayer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.game.ReconnectResponse.Player, opt_index);
};


proto.game.ReconnectResponse.prototype.clearPlayerList = function() {
  this.setPlayerList([]);
};


/**
 * optional uint32 code = 12;
 * @return {number}
 */
proto.game.ReconnectResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.game.ReconnectResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.ReconnectResponse.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.game.ReconnectResponse.Player.repeatedFields_, null);
};
goog.inherits(proto.game.ReconnectResponse.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.ReconnectResponse.Player.displayName = 'proto.game.ReconnectResponse.Player';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.game.ReconnectResponse.Player.repeatedFields_ = [7,8,9,10,11,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.ReconnectResponse.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.game.ReconnectResponse.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.ReconnectResponse.Player} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.ReconnectResponse.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    seat: jspb.Message.getFieldWithDefault(msg, 1, 0),
    playerUuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    info: jspb.Message.getFieldWithDefault(msg, 3, ""),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isOnline: jspb.Message.getFieldWithDefault(msg, 5, 0),
    totalScore: jspb.Message.getFieldWithDefault(msg, 6, 0),
    cardsInHandList: jspb.Message.toObjectList(msg.getCardsInHandList(),
    proto.game.Card.toObject, includeInstance),
    cardsDiscardList: jspb.Message.toObjectList(msg.getCardsDiscardList(),
    proto.game.Card.toObject, includeInstance),
    cardsKongExposedList: jspb.Message.toObjectList(msg.getCardsKongExposedList(),
    proto.game.Card.toObject, includeInstance),
    cardsKongConcealedList: jspb.Message.toObjectList(msg.getCardsKongConcealedList(),
    proto.game.Card.toObject, includeInstance),
    cardsPongList: jspb.Message.toObjectList(msg.getCardsPongList(),
    proto.game.Card.toObject, includeInstance),
    cardsChowList: jspb.Message.toObjectList(msg.getCardsChowList(),
    proto.game.Card.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.ReconnectResponse.Player}
 */
proto.game.ReconnectResponse.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.ReconnectResponse.Player;
  return proto.game.ReconnectResponse.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.ReconnectResponse.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.ReconnectResponse.Player}
 */
proto.game.ReconnectResponse.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIsOnline(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalScore(value);
      break;
    case 7:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.addCardsInHand(value);
      break;
    case 8:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.addCardsDiscard(value);
      break;
    case 9:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.addCardsKongExposed(value);
      break;
    case 10:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.addCardsKongConcealed(value);
      break;
    case 11:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.addCardsPong(value);
      break;
    case 12:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.addCardsChow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.game.ReconnectResponse.Player} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.ReconnectResponse.Player.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.ReconnectResponse.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.ReconnectResponse.Player.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSeat();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getPlayerUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getInfo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getIsOnline();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getTotalScore();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getCardsInHandList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
  f = this.getCardsDiscardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
  f = this.getCardsKongExposedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
  f = this.getCardsKongConcealedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
  f = this.getCardsPongList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
  f = this.getCardsChowList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 seat = 1;
 * @return {number}
 */
proto.game.ReconnectResponse.Player.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.game.ReconnectResponse.Player.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string player_uuid = 2;
 * @return {string}
 */
proto.game.ReconnectResponse.Player.prototype.getPlayerUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.game.ReconnectResponse.Player.prototype.setPlayerUuid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string info = 3;
 * @return {string}
 */
proto.game.ReconnectResponse.Player.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.game.ReconnectResponse.Player.prototype.setInfo = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 status = 4;
 * @return {number}
 */
proto.game.ReconnectResponse.Player.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.game.ReconnectResponse.Player.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 is_online = 5;
 * @return {number}
 */
proto.game.ReconnectResponse.Player.prototype.getIsOnline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.game.ReconnectResponse.Player.prototype.setIsOnline = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 total_score = 6;
 * @return {number}
 */
proto.game.ReconnectResponse.Player.prototype.getTotalScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.game.ReconnectResponse.Player.prototype.setTotalScore = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated Card cards_in_hand = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.Card>}
 */
proto.game.ReconnectResponse.Player.prototype.getCardsInHandList = function() {
  return /** @type{!Array.<!proto.game.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.Card, 7));
};


/** @param {!Array.<!proto.game.Card>} value */
proto.game.ReconnectResponse.Player.prototype.setCardsInHandList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.game.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.Card}
 */
proto.game.ReconnectResponse.Player.prototype.addCardsInHand = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.game.Card, opt_index);
};


proto.game.ReconnectResponse.Player.prototype.clearCardsInHandList = function() {
  this.setCardsInHandList([]);
};


/**
 * repeated Card cards_discard = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.Card>}
 */
proto.game.ReconnectResponse.Player.prototype.getCardsDiscardList = function() {
  return /** @type{!Array.<!proto.game.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.Card, 8));
};


/** @param {!Array.<!proto.game.Card>} value */
proto.game.ReconnectResponse.Player.prototype.setCardsDiscardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.game.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.Card}
 */
proto.game.ReconnectResponse.Player.prototype.addCardsDiscard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.game.Card, opt_index);
};


proto.game.ReconnectResponse.Player.prototype.clearCardsDiscardList = function() {
  this.setCardsDiscardList([]);
};


/**
 * repeated Card cards_kong_exposed = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.Card>}
 */
proto.game.ReconnectResponse.Player.prototype.getCardsKongExposedList = function() {
  return /** @type{!Array.<!proto.game.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.Card, 9));
};


/** @param {!Array.<!proto.game.Card>} value */
proto.game.ReconnectResponse.Player.prototype.setCardsKongExposedList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.game.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.Card}
 */
proto.game.ReconnectResponse.Player.prototype.addCardsKongExposed = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.game.Card, opt_index);
};


proto.game.ReconnectResponse.Player.prototype.clearCardsKongExposedList = function() {
  this.setCardsKongExposedList([]);
};


/**
 * repeated Card cards_kong_concealed = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.Card>}
 */
proto.game.ReconnectResponse.Player.prototype.getCardsKongConcealedList = function() {
  return /** @type{!Array.<!proto.game.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.Card, 10));
};


/** @param {!Array.<!proto.game.Card>} value */
proto.game.ReconnectResponse.Player.prototype.setCardsKongConcealedList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.game.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.Card}
 */
proto.game.ReconnectResponse.Player.prototype.addCardsKongConcealed = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.game.Card, opt_index);
};


proto.game.ReconnectResponse.Player.prototype.clearCardsKongConcealedList = function() {
  this.setCardsKongConcealedList([]);
};


/**
 * repeated Card cards_pong = 11;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.Card>}
 */
proto.game.ReconnectResponse.Player.prototype.getCardsPongList = function() {
  return /** @type{!Array.<!proto.game.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.Card, 11));
};


/** @param {!Array.<!proto.game.Card>} value */
proto.game.ReconnectResponse.Player.prototype.setCardsPongList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.game.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.Card}
 */
proto.game.ReconnectResponse.Player.prototype.addCardsPong = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.game.Card, opt_index);
};


proto.game.ReconnectResponse.Player.prototype.clearCardsPongList = function() {
  this.setCardsPongList([]);
};


/**
 * repeated Card cards_chow = 12;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.Card>}
 */
proto.game.ReconnectResponse.Player.prototype.getCardsChowList = function() {
  return /** @type{!Array.<!proto.game.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.Card, 12));
};


/** @param {!Array.<!proto.game.Card>} value */
proto.game.ReconnectResponse.Player.prototype.setCardsChowList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.game.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.Card}
 */
proto.game.ReconnectResponse.Player.prototype.addCardsChow = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.game.Card, opt_index);
};


proto.game.ReconnectResponse.Player.prototype.clearCardsChowList = function() {
  this.setCardsChowList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.ReadyHandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.game.ReadyHandResponse.repeatedFields_, null);
};
goog.inherits(proto.game.ReadyHandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.ReadyHandResponse.displayName = 'proto.game.ReadyHandResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.game.ReadyHandResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.ReadyHandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.game.ReadyHandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.ReadyHandResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.ReadyHandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardList: jspb.Message.toObjectList(msg.getCardList(),
    proto.game.Card.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.ReadyHandResponse}
 */
proto.game.ReadyHandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.ReadyHandResponse;
  return proto.game.ReadyHandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.ReadyHandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.ReadyHandResponse}
 */
proto.game.ReadyHandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.addCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.game.ReadyHandResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.ReadyHandResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.ReadyHandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.ReadyHandResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Card card = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.Card>}
 */
proto.game.ReadyHandResponse.prototype.getCardList = function() {
  return /** @type{!Array.<!proto.game.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.Card, 1));
};


/** @param {!Array.<!proto.game.Card>} value */
proto.game.ReadyHandResponse.prototype.setCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.game.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.Card}
 */
proto.game.ReadyHandResponse.prototype.addCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.game.Card, opt_index);
};


proto.game.ReadyHandResponse.prototype.clearCardList = function() {
  this.setCardList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.WinFlag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.WinFlag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.WinFlag.displayName = 'proto.game.WinFlag';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.WinFlag.prototype.toObject = function(opt_includeInstance) {
  return proto.game.WinFlag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.WinFlag} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.WinFlag.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.WinFlag}
 */
proto.game.WinFlag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.WinFlag;
  return proto.game.WinFlag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.WinFlag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.WinFlag}
 */
proto.game.WinFlag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.game.WinFlag} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.WinFlag.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.WinFlag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.WinFlag.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFlag();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string flag = 1;
 * @return {string}
 */
proto.game.WinFlag.prototype.getFlag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.game.WinFlag.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.ActionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.ActionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.ActionRequest.displayName = 'proto.game.ActionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.ActionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.game.ActionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.ActionRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.ActionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.ActionRequest}
 */
proto.game.ActionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.ActionRequest;
  return proto.game.ActionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.ActionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.ActionRequest}
 */
proto.game.ActionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.game.ActionRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.ActionRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.ActionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.ActionRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getActionId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 action_id = 1;
 * @return {number}
 */
proto.game.ActionRequest.prototype.getActionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.game.ActionRequest.prototype.setActionId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.ActionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.game.ActionResponse.repeatedFields_, null);
};
goog.inherits(proto.game.ActionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.ActionResponse.displayName = 'proto.game.ActionResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.game.ActionResponse.repeatedFields_ = [1,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.ActionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.game.ActionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.ActionResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.ActionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    refCardList: jspb.Message.toObjectList(msg.getRefCardList(),
    proto.game.Card.toObject, includeInstance),
    playerUuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    activeCard: (f = msg.getActiveCard()) && proto.game.Card.toObject(includeInstance, f),
    activeType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    triggerSeat: jspb.Message.getFieldWithDefault(msg, 5, 0),
    winFlagList: jspb.Message.toObjectList(msg.getWinFlagList(),
    proto.game.WinFlag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.ActionResponse}
 */
proto.game.ActionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.ActionResponse;
  return proto.game.ActionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.ActionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.ActionResponse}
 */
proto.game.ActionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.addRefCard(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerUuid(value);
      break;
    case 3:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.setActiveCard(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActiveType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTriggerSeat(value);
      break;
    case 6:
      var value = new proto.game.WinFlag;
      reader.readMessage(value,proto.game.WinFlag.deserializeBinaryFromReader);
      msg.addWinFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.game.ActionResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.ActionResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.ActionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.ActionResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRefCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
  f = this.getPlayerUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getActiveCard();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
  f = this.getActiveType();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getTriggerSeat();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getWinFlagList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.game.WinFlag.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Card ref_card = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.Card>}
 */
proto.game.ActionResponse.prototype.getRefCardList = function() {
  return /** @type{!Array.<!proto.game.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.Card, 1));
};


/** @param {!Array.<!proto.game.Card>} value */
proto.game.ActionResponse.prototype.setRefCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.game.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.Card}
 */
proto.game.ActionResponse.prototype.addRefCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.game.Card, opt_index);
};


proto.game.ActionResponse.prototype.clearRefCardList = function() {
  this.setRefCardList([]);
};


/**
 * optional string player_uuid = 2;
 * @return {string}
 */
proto.game.ActionResponse.prototype.getPlayerUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.game.ActionResponse.prototype.setPlayerUuid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Card active_card = 3;
 * @return {?proto.game.Card}
 */
proto.game.ActionResponse.prototype.getActiveCard = function() {
  return /** @type{?proto.game.Card} */ (
    jspb.Message.getWrapperField(this, proto.game.Card, 3));
};


/** @param {?proto.game.Card|undefined} value */
proto.game.ActionResponse.prototype.setActiveCard = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.game.ActionResponse.prototype.clearActiveCard = function() {
  this.setActiveCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.game.ActionResponse.prototype.hasActiveCard = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 active_type = 4;
 * @return {number}
 */
proto.game.ActionResponse.prototype.getActiveType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.game.ActionResponse.prototype.setActiveType = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 trigger_seat = 5;
 * @return {number}
 */
proto.game.ActionResponse.prototype.getTriggerSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.game.ActionResponse.prototype.setTriggerSeat = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated WinFlag win_flag = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.WinFlag>}
 */
proto.game.ActionResponse.prototype.getWinFlagList = function() {
  return /** @type{!Array.<!proto.game.WinFlag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.WinFlag, 6));
};


/** @param {!Array.<!proto.game.WinFlag>} value */
proto.game.ActionResponse.prototype.setWinFlagList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.game.WinFlag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.WinFlag}
 */
proto.game.ActionResponse.prototype.addWinFlag = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.game.WinFlag, opt_index);
};


proto.game.ActionResponse.prototype.clearWinFlagList = function() {
  this.setWinFlagList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.Fold = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.Fold, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.Fold.displayName = 'proto.game.Fold';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.Fold.prototype.toObject = function(opt_includeInstance) {
  return proto.game.Fold.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.Fold} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.Fold.toObject = function(includeInstance, msg) {
  var f, obj = {
    player: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.Fold}
 */
proto.game.Fold.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.Fold;
  return proto.game.Fold.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.Fold} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.Fold}
 */
proto.game.Fold.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.game.Fold} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.Fold.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.Fold.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.Fold.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPlayer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string player = 1;
 * @return {string}
 */
proto.game.Fold.prototype.getPlayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.game.Fold.prototype.setPlayer = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.SettleForRoundResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.game.SettleForRoundResponse.repeatedFields_, null);
};
goog.inherits(proto.game.SettleForRoundResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.SettleForRoundResponse.displayName = 'proto.game.SettleForRoundResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.game.SettleForRoundResponse.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.SettleForRoundResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.game.SettleForRoundResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.SettleForRoundResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.SettleForRoundResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    winType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    drawNiaoList: jspb.Message.toObjectList(msg.getDrawNiaoList(),
    proto.game.Card.toObject, includeInstance),
    playerDataList: jspb.Message.toObjectList(msg.getPlayerDataList(),
    proto.game.SettleForRoundResponse.PlayerData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.SettleForRoundResponse}
 */
proto.game.SettleForRoundResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.SettleForRoundResponse;
  return proto.game.SettleForRoundResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.SettleForRoundResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.SettleForRoundResponse}
 */
proto.game.SettleForRoundResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWinType(value);
      break;
    case 2:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.addDrawNiao(value);
      break;
    case 3:
      var value = new proto.game.SettleForRoundResponse.PlayerData;
      reader.readMessage(value,proto.game.SettleForRoundResponse.PlayerData.deserializeBinaryFromReader);
      msg.addPlayerData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.game.SettleForRoundResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.SettleForRoundResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.SettleForRoundResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.SettleForRoundResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWinType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getDrawNiaoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
  f = this.getPlayerDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.game.SettleForRoundResponse.PlayerData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 win_type = 1;
 * @return {number}
 */
proto.game.SettleForRoundResponse.prototype.getWinType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.game.SettleForRoundResponse.prototype.setWinType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Card draw_niao = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.Card>}
 */
proto.game.SettleForRoundResponse.prototype.getDrawNiaoList = function() {
  return /** @type{!Array.<!proto.game.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.Card, 2));
};


/** @param {!Array.<!proto.game.Card>} value */
proto.game.SettleForRoundResponse.prototype.setDrawNiaoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.game.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.Card}
 */
proto.game.SettleForRoundResponse.prototype.addDrawNiao = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.game.Card, opt_index);
};


proto.game.SettleForRoundResponse.prototype.clearDrawNiaoList = function() {
  this.setDrawNiaoList([]);
};


/**
 * repeated PlayerData player_data = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.SettleForRoundResponse.PlayerData>}
 */
proto.game.SettleForRoundResponse.prototype.getPlayerDataList = function() {
  return /** @type{!Array.<!proto.game.SettleForRoundResponse.PlayerData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.SettleForRoundResponse.PlayerData, 3));
};


/** @param {!Array.<!proto.game.SettleForRoundResponse.PlayerData>} value */
proto.game.SettleForRoundResponse.prototype.setPlayerDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.game.SettleForRoundResponse.PlayerData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.SettleForRoundResponse.PlayerData}
 */
proto.game.SettleForRoundResponse.prototype.addPlayerData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.game.SettleForRoundResponse.PlayerData, opt_index);
};


proto.game.SettleForRoundResponse.prototype.clearPlayerDataList = function() {
  this.setPlayerDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.SettleForRoundResponse.PlayerData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.game.SettleForRoundResponse.PlayerData.repeatedFields_, null);
};
goog.inherits(proto.game.SettleForRoundResponse.PlayerData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.SettleForRoundResponse.PlayerData.displayName = 'proto.game.SettleForRoundResponse.PlayerData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.game.SettleForRoundResponse.PlayerData.repeatedFields_ = [2,3,4,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.toObject = function(opt_includeInstance) {
  return proto.game.SettleForRoundResponse.PlayerData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.SettleForRoundResponse.PlayerData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.SettleForRoundResponse.PlayerData.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerUuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cardsGroupList: jspb.Message.toObjectList(msg.getCardsGroupList(),
    proto.game.Card.toObject, includeInstance),
    cardsInHandList: jspb.Message.toObjectList(msg.getCardsInHandList(),
    proto.game.Card.toObject, includeInstance),
    cardsDrawNiaoList: jspb.Message.toObjectList(msg.getCardsDrawNiaoList(),
    proto.game.Card.toObject, includeInstance),
    winCard: (f = msg.getWinCard()) && proto.game.Card.toObject(includeInstance, f),
    score: jspb.Message.getFieldWithDefault(msg, 6, 0),
    total: jspb.Message.getFieldWithDefault(msg, 7, 0),
    winType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    winFlagList: jspb.Message.toObjectList(msg.getWinFlagList(),
    proto.game.WinFlag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.SettleForRoundResponse.PlayerData}
 */
proto.game.SettleForRoundResponse.PlayerData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.SettleForRoundResponse.PlayerData;
  return proto.game.SettleForRoundResponse.PlayerData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.SettleForRoundResponse.PlayerData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.SettleForRoundResponse.PlayerData}
 */
proto.game.SettleForRoundResponse.PlayerData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerUuid(value);
      break;
    case 2:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.addCardsGroup(value);
      break;
    case 3:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.addCardsInHand(value);
      break;
    case 4:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.addCardsDrawNiao(value);
      break;
    case 5:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.setWinCard(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWinType(value);
      break;
    case 9:
      var value = new proto.game.WinFlag;
      reader.readMessage(value,proto.game.WinFlag.deserializeBinaryFromReader);
      msg.addWinFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.game.SettleForRoundResponse.PlayerData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.SettleForRoundResponse.PlayerData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPlayerUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCardsGroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
  f = this.getCardsInHandList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
  f = this.getCardsDrawNiaoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
  f = this.getWinCard();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
  f = this.getScore();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = this.getWinType();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = this.getWinFlagList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.game.WinFlag.serializeBinaryToWriter
    );
  }
};


/**
 * optional string player_uuid = 1;
 * @return {string}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.getPlayerUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.game.SettleForRoundResponse.PlayerData.prototype.setPlayerUuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Card cards_group = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.Card>}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.getCardsGroupList = function() {
  return /** @type{!Array.<!proto.game.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.Card, 2));
};


/** @param {!Array.<!proto.game.Card>} value */
proto.game.SettleForRoundResponse.PlayerData.prototype.setCardsGroupList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.game.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.Card}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.addCardsGroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.game.Card, opt_index);
};


proto.game.SettleForRoundResponse.PlayerData.prototype.clearCardsGroupList = function() {
  this.setCardsGroupList([]);
};


/**
 * repeated Card cards_in_hand = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.Card>}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.getCardsInHandList = function() {
  return /** @type{!Array.<!proto.game.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.Card, 3));
};


/** @param {!Array.<!proto.game.Card>} value */
proto.game.SettleForRoundResponse.PlayerData.prototype.setCardsInHandList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.game.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.Card}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.addCardsInHand = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.game.Card, opt_index);
};


proto.game.SettleForRoundResponse.PlayerData.prototype.clearCardsInHandList = function() {
  this.setCardsInHandList([]);
};


/**
 * repeated Card cards_draw_niao = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.Card>}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.getCardsDrawNiaoList = function() {
  return /** @type{!Array.<!proto.game.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.Card, 4));
};


/** @param {!Array.<!proto.game.Card>} value */
proto.game.SettleForRoundResponse.PlayerData.prototype.setCardsDrawNiaoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.game.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.Card}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.addCardsDrawNiao = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.game.Card, opt_index);
};


proto.game.SettleForRoundResponse.PlayerData.prototype.clearCardsDrawNiaoList = function() {
  this.setCardsDrawNiaoList([]);
};


/**
 * optional Card win_card = 5;
 * @return {?proto.game.Card}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.getWinCard = function() {
  return /** @type{?proto.game.Card} */ (
    jspb.Message.getWrapperField(this, proto.game.Card, 5));
};


/** @param {?proto.game.Card|undefined} value */
proto.game.SettleForRoundResponse.PlayerData.prototype.setWinCard = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.game.SettleForRoundResponse.PlayerData.prototype.clearWinCard = function() {
  this.setWinCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.hasWinCard = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 score = 6;
 * @return {number}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.game.SettleForRoundResponse.PlayerData.prototype.setScore = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 total = 7;
 * @return {number}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.game.SettleForRoundResponse.PlayerData.prototype.setTotal = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 win_type = 8;
 * @return {number}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.getWinType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.game.SettleForRoundResponse.PlayerData.prototype.setWinType = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * repeated WinFlag win_flag = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.WinFlag>}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.getWinFlagList = function() {
  return /** @type{!Array.<!proto.game.WinFlag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.WinFlag, 9));
};


/** @param {!Array.<!proto.game.WinFlag>} value */
proto.game.SettleForRoundResponse.PlayerData.prototype.setWinFlagList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.game.WinFlag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.WinFlag}
 */
proto.game.SettleForRoundResponse.PlayerData.prototype.addWinFlag = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.game.WinFlag, opt_index);
};


proto.game.SettleForRoundResponse.PlayerData.prototype.clearWinFlagList = function() {
  this.setWinFlagList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.SettleForRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.game.SettleForRoomResponse.repeatedFields_, null);
};
goog.inherits(proto.game.SettleForRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.SettleForRoomResponse.displayName = 'proto.game.SettleForRoomResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.game.SettleForRoomResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.SettleForRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.game.SettleForRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.SettleForRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.SettleForRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getFieldWithDefault(msg, 1, 0),
    playerDataList: jspb.Message.toObjectList(msg.getPlayerDataList(),
    proto.game.SettleForRoomResponse.PlayerData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.SettleForRoomResponse}
 */
proto.game.SettleForRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.SettleForRoomResponse;
  return proto.game.SettleForRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.SettleForRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.SettleForRoomResponse}
 */
proto.game.SettleForRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = new proto.game.SettleForRoomResponse.PlayerData;
      reader.readMessage(value,proto.game.SettleForRoomResponse.PlayerData.deserializeBinaryFromReader);
      msg.addPlayerData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.game.SettleForRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.SettleForRoomResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.SettleForRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.SettleForRoomResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFlag();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getPlayerDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.game.SettleForRoomResponse.PlayerData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 flag = 1;
 * @return {number}
 */
proto.game.SettleForRoomResponse.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.game.SettleForRoomResponse.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated PlayerData player_data = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.SettleForRoomResponse.PlayerData>}
 */
proto.game.SettleForRoomResponse.prototype.getPlayerDataList = function() {
  return /** @type{!Array.<!proto.game.SettleForRoomResponse.PlayerData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.SettleForRoomResponse.PlayerData, 2));
};


/** @param {!Array.<!proto.game.SettleForRoomResponse.PlayerData>} value */
proto.game.SettleForRoomResponse.prototype.setPlayerDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.game.SettleForRoomResponse.PlayerData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.SettleForRoomResponse.PlayerData}
 */
proto.game.SettleForRoomResponse.prototype.addPlayerData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.game.SettleForRoomResponse.PlayerData, opt_index);
};


proto.game.SettleForRoomResponse.prototype.clearPlayerDataList = function() {
  this.setPlayerDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.SettleForRoomResponse.PlayerData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.SettleForRoomResponse.PlayerData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.SettleForRoomResponse.PlayerData.displayName = 'proto.game.SettleForRoomResponse.PlayerData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.SettleForRoomResponse.PlayerData.prototype.toObject = function(opt_includeInstance) {
  return proto.game.SettleForRoomResponse.PlayerData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.SettleForRoomResponse.PlayerData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.SettleForRoomResponse.PlayerData.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerUuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seat: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalScore: jspb.Message.getFieldWithDefault(msg, 3, 0),
    topScore: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bigWinDrawCnt: jspb.Message.getFieldWithDefault(msg, 5, 0),
    bigWinDiscardCnt: jspb.Message.getFieldWithDefault(msg, 6, 0),
    smallWinDrawCnt: jspb.Message.getFieldWithDefault(msg, 7, 0),
    smallWinDiscardCnt: jspb.Message.getFieldWithDefault(msg, 8, 0),
    paoCnt: jspb.Message.getFieldWithDefault(msg, 9, 0),
    isOwner: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.SettleForRoomResponse.PlayerData}
 */
proto.game.SettleForRoomResponse.PlayerData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.SettleForRoomResponse.PlayerData;
  return proto.game.SettleForRoomResponse.PlayerData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.SettleForRoomResponse.PlayerData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.SettleForRoomResponse.PlayerData}
 */
proto.game.SettleForRoomResponse.PlayerData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalScore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTopScore(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBigWinDrawCnt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBigWinDiscardCnt(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSmallWinDrawCnt(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSmallWinDiscardCnt(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPaoCnt(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIsOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.game.SettleForRoomResponse.PlayerData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.SettleForRoomResponse.PlayerData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.SettleForRoomResponse.PlayerData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.SettleForRoomResponse.PlayerData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPlayerUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSeat();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getTotalScore();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getTopScore();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getBigWinDrawCnt();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getBigWinDiscardCnt();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getSmallWinDrawCnt();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getSmallWinDiscardCnt();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = this.getPaoCnt();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = this.getIsOwner();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * optional string player_uuid = 1;
 * @return {string}
 */
proto.game.SettleForRoomResponse.PlayerData.prototype.getPlayerUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.game.SettleForRoomResponse.PlayerData.prototype.setPlayerUuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 seat = 2;
 * @return {number}
 */
proto.game.SettleForRoomResponse.PlayerData.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.game.SettleForRoomResponse.PlayerData.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 total_score = 3;
 * @return {number}
 */
proto.game.SettleForRoomResponse.PlayerData.prototype.getTotalScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.game.SettleForRoomResponse.PlayerData.prototype.setTotalScore = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 top_score = 4;
 * @return {number}
 */
proto.game.SettleForRoomResponse.PlayerData.prototype.getTopScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.game.SettleForRoomResponse.PlayerData.prototype.setTopScore = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 big_win_draw_cnt = 5;
 * @return {number}
 */
proto.game.SettleForRoomResponse.PlayerData.prototype.getBigWinDrawCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.game.SettleForRoomResponse.PlayerData.prototype.setBigWinDrawCnt = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 big_win_discard_cnt = 6;
 * @return {number}
 */
proto.game.SettleForRoomResponse.PlayerData.prototype.getBigWinDiscardCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.game.SettleForRoomResponse.PlayerData.prototype.setBigWinDiscardCnt = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 small_win_draw_cnt = 7;
 * @return {number}
 */
proto.game.SettleForRoomResponse.PlayerData.prototype.getSmallWinDrawCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.game.SettleForRoomResponse.PlayerData.prototype.setSmallWinDrawCnt = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 small_win_discard_cnt = 8;
 * @return {number}
 */
proto.game.SettleForRoomResponse.PlayerData.prototype.getSmallWinDiscardCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.game.SettleForRoomResponse.PlayerData.prototype.setSmallWinDiscardCnt = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 pao_cnt = 9;
 * @return {number}
 */
proto.game.SettleForRoomResponse.PlayerData.prototype.getPaoCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.game.SettleForRoomResponse.PlayerData.prototype.setPaoCnt = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint32 is_owner = 10;
 * @return {number}
 */
proto.game.SettleForRoomResponse.PlayerData.prototype.getIsOwner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.game.SettleForRoomResponse.PlayerData.prototype.setIsOwner = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.PromptResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.game.PromptResponse.repeatedFields_, null);
};
goog.inherits(proto.game.PromptResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.PromptResponse.displayName = 'proto.game.PromptResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.game.PromptResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.PromptResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.game.PromptResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.PromptResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.PromptResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    promptList: jspb.Message.toObjectList(msg.getPromptList(),
    proto.game.PromptResponse.Prompt.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.PromptResponse}
 */
proto.game.PromptResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.PromptResponse;
  return proto.game.PromptResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.PromptResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.PromptResponse}
 */
proto.game.PromptResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.game.PromptResponse.Prompt;
      reader.readMessage(value,proto.game.PromptResponse.Prompt.deserializeBinaryFromReader);
      msg.addPrompt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.game.PromptResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.PromptResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.PromptResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.PromptResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPromptList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.game.PromptResponse.Prompt.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Prompt prompt = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.PromptResponse.Prompt>}
 */
proto.game.PromptResponse.prototype.getPromptList = function() {
  return /** @type{!Array.<!proto.game.PromptResponse.Prompt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.PromptResponse.Prompt, 1));
};


/** @param {!Array.<!proto.game.PromptResponse.Prompt>} value */
proto.game.PromptResponse.prototype.setPromptList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.game.PromptResponse.Prompt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.PromptResponse.Prompt}
 */
proto.game.PromptResponse.prototype.addPrompt = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.game.PromptResponse.Prompt, opt_index);
};


proto.game.PromptResponse.prototype.clearPromptList = function() {
  this.setPromptList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.PromptResponse.Prompt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.game.PromptResponse.Prompt.repeatedFields_, null);
};
goog.inherits(proto.game.PromptResponse.Prompt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.PromptResponse.Prompt.displayName = 'proto.game.PromptResponse.Prompt';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.game.PromptResponse.Prompt.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.PromptResponse.Prompt.prototype.toObject = function(opt_includeInstance) {
  return proto.game.PromptResponse.Prompt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.PromptResponse.Prompt} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.PromptResponse.Prompt.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    prompt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    refCardList: jspb.Message.toObjectList(msg.getRefCardList(),
    proto.game.Card.toObject, includeInstance),
    opCard: (f = msg.getOpCard()) && proto.game.Card.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.PromptResponse.Prompt}
 */
proto.game.PromptResponse.Prompt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.PromptResponse.Prompt;
  return proto.game.PromptResponse.Prompt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.PromptResponse.Prompt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.PromptResponse.Prompt}
 */
proto.game.PromptResponse.Prompt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrompt(value);
      break;
    case 3:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.addRefCard(value);
      break;
    case 4:
      var value = new proto.game.Card;
      reader.readMessage(value,proto.game.Card.deserializeBinaryFromReader);
      msg.setOpCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.game.PromptResponse.Prompt} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.PromptResponse.Prompt.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.PromptResponse.Prompt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.game.PromptResponse.Prompt.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getActionId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getPrompt();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getRefCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
  f = this.getOpCard();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.game.Card.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 action_id = 1;
 * @return {number}
 */
proto.game.PromptResponse.Prompt.prototype.getActionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.game.PromptResponse.Prompt.prototype.setActionId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 prompt = 2;
 * @return {number}
 */
proto.game.PromptResponse.Prompt.prototype.getPrompt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.game.PromptResponse.Prompt.prototype.setPrompt = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Card ref_card = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.game.Card>}
 */
proto.game.PromptResponse.Prompt.prototype.getRefCardList = function() {
  return /** @type{!Array.<!proto.game.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.game.Card, 3));
};


/** @param {!Array.<!proto.game.Card>} value */
proto.game.PromptResponse.Prompt.prototype.setRefCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.game.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.game.Card}
 */
proto.game.PromptResponse.Prompt.prototype.addRefCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.game.Card, opt_index);
};


proto.game.PromptResponse.Prompt.prototype.clearRefCardList = function() {
  this.setRefCardList([]);
};


/**
 * optional Card op_card = 4;
 * @return {?proto.game.Card}
 */
proto.game.PromptResponse.Prompt.prototype.getOpCard = function() {
  return /** @type{?proto.game.Card} */ (
    jspb.Message.getWrapperField(this, proto.game.Card, 4));
};


/** @param {?proto.game.Card|undefined} value */
proto.game.PromptResponse.Prompt.prototype.setOpCard = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.game.PromptResponse.Prompt.prototype.clearOpCard = function() {
  this.setOpCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.game.PromptResponse.Prompt.prototype.hasOpCard = function() {
  return jspb.Message.getField(this, 4) != null;
};


