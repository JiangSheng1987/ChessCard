/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.login.CheckVersionRequest');
goog.provide('proto.login.CheckVersionResponse');
goog.provide('proto.login.HeartbeatRequest');
goog.provide('proto.login.HeartbeatResponse');
goog.provide('proto.login.LoginRequest');
goog.provide('proto.login.LoginResponse');
goog.provide('proto.login.UserGoldRequest');
goog.provide('proto.login.UserGolgResponse');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CheckVersionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.CheckVersionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CheckVersionRequest.displayName = 'proto.login.CheckVersionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CheckVersionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CheckVersionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CheckVersionRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CheckVersionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appUuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    verNo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    androidOrIos: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CheckVersionRequest}
 */
proto.login.CheckVersionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CheckVersionRequest;
  return proto.login.CheckVersionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CheckVersionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CheckVersionRequest}
 */
proto.login.CheckVersionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerNo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAndroidOrIos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CheckVersionRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CheckVersionRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CheckVersionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CheckVersionRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppUuid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getVerNo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAndroidOrIos();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 app_uuid = 1;
 * @return {number}
 */
proto.login.CheckVersionRequest.prototype.getAppUuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CheckVersionRequest.prototype.setAppUuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string ver_no = 2;
 * @return {string}
 */
proto.login.CheckVersionRequest.prototype.getVerNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.CheckVersionRequest.prototype.setVerNo = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 android_or_ios = 3;
 * @return {number}
 */
proto.login.CheckVersionRequest.prototype.getAndroidOrIos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.CheckVersionRequest.prototype.setAndroidOrIos = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CheckVersionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.CheckVersionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CheckVersionResponse.displayName = 'proto.login.CheckVersionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CheckVersionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CheckVersionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CheckVersionResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CheckVersionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mandatoryUpdate: jspb.Message.getFieldWithDefault(msg, 2, false),
    downloadLink: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CheckVersionResponse}
 */
proto.login.CheckVersionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CheckVersionResponse;
  return proto.login.CheckVersionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CheckVersionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CheckVersionResponse}
 */
proto.login.CheckVersionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMandatoryUpdate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDownloadLink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CheckVersionResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CheckVersionResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CheckVersionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CheckVersionResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getMandatoryUpdate();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getDownloadLink();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.CheckVersionResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CheckVersionResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool mandatory_update = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.login.CheckVersionResponse.prototype.getMandatoryUpdate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.login.CheckVersionResponse.prototype.setMandatoryUpdate = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string download_link = 3;
 * @return {string}
 */
proto.login.CheckVersionResponse.prototype.getDownloadLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.CheckVersionResponse.prototype.setDownloadLink = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.LoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.LoginRequest.displayName = 'proto.login.LoginRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.LoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.LoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.LoginRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.LoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    wxCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    appUuid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    deviceId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    verNo: jspb.Message.getFieldWithDefault(msg, 6, ""),
    location: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.LoginRequest}
 */
proto.login.LoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.LoginRequest;
  return proto.login.LoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.LoginRequest}
 */
proto.login.LoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWxCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppUuid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerNo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.LoginRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.LoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.LoginRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWxCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getAppUuid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getVerNo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getLocation();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string wx_code = 1;
 * @return {string}
 */
proto.login.LoginRequest.prototype.getWxCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.login.LoginRequest.prototype.setWxCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 channel = 2;
 * @return {number}
 */
proto.login.LoginRequest.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.LoginRequest.prototype.setChannel = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 app_uuid = 3;
 * @return {number}
 */
proto.login.LoginRequest.prototype.getAppUuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.LoginRequest.prototype.setAppUuid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string device_id = 5;
 * @return {string}
 */
proto.login.LoginRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.login.LoginRequest.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string ver_no = 6;
 * @return {string}
 */
proto.login.LoginRequest.prototype.getVerNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.login.LoginRequest.prototype.setVerNo = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string location = 7;
 * @return {string}
 */
proto.login.LoginRequest.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.login.LoginRequest.prototype.setLocation = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.LoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.LoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.LoginResponse.displayName = 'proto.login.LoginResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.LoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.LoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.LoginResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.LoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nickname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    olkey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gold: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    playerId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    playerUuid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    headimgurl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    parentId: jspb.Message.getFieldWithDefault(msg, 11, 0),
    ip: jspb.Message.getFieldWithDefault(msg, 12, ""),
    location: jspb.Message.getFieldWithDefault(msg, 13, ""),
    isMaintain: jspb.Message.getFieldWithDefault(msg, 16, false),
    maintainInfo: jspb.Message.getFieldWithDefault(msg, 17, ""),
    notice: jspb.Message.getFieldWithDefault(msg, 18, ""),
    shareIco: jspb.Message.getFieldWithDefault(msg, 20, ""),
    shareUrl: jspb.Message.getFieldWithDefault(msg, 21, ""),
    playerReconnection: jspb.Message.getFieldWithDefault(msg, 23, false),
    playerRoomId: jspb.Message.getFieldWithDefault(msg, 24, 0),
    playerServerIp: jspb.Message.getFieldWithDefault(msg, 25, ""),
    playerServerPort: jspb.Message.getFieldWithDefault(msg, 26, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.LoginResponse}
 */
proto.login.LoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.LoginResponse;
  return proto.login.LoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.LoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.LoginResponse}
 */
proto.login.LoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOlkey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGold(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerUuid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadimgurl(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParentId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMaintain(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaintainInfo(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotice(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setShareIco(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setShareUrl(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPlayerReconnection(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayerRoomId(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerServerIp(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerServerPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.LoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.LoginResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.LoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.LoginResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getNickname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getOlkey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getGold();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getSex();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getPlayerUuid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getHeadimgurl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getParentId();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = this.getIp();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getLocation();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getIsMaintain();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = this.getMaintainInfo();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = this.getNotice();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = this.getShareIco();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = this.getShareUrl();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = this.getPlayerReconnection();
  if (f) {
    writer.writeBool(
      23,
      f
    );
  }
  f = this.getPlayerRoomId();
  if (f !== 0) {
    writer.writeUint32(
      24,
      f
    );
  }
  f = this.getPlayerServerIp();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = this.getPlayerServerPort();
  if (f !== 0) {
    writer.writeInt32(
      26,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string nickname = 2;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setNickname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string olkey = 3;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getOlkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setOlkey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 gold = 4;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setGold = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 sex = 5;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setSex = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 player_id = 6;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setPlayerId = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string player_uuid = 7;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getPlayerUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setPlayerUuid = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string headimgurl = 8;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getHeadimgurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setHeadimgurl = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 parent_id = 11;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getParentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setParentId = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string ip = 12;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setIp = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string location = 13;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setLocation = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional bool is_maintain = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.login.LoginResponse.prototype.getIsMaintain = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.login.LoginResponse.prototype.setIsMaintain = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional string maintain_info = 17;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getMaintainInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setMaintainInfo = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional string notice = 18;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getNotice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setNotice = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional string share_ico = 20;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getShareIco = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setShareIco = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional string share_url = 21;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getShareUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setShareUrl = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional bool player_reconnection = 23;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.login.LoginResponse.prototype.getPlayerReconnection = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 23, false));
};


/** @param {boolean} value */
proto.login.LoginResponse.prototype.setPlayerReconnection = function(value) {
  jspb.Message.setField(this, 23, value);
};


/**
 * optional uint32 player_room_id = 24;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getPlayerRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setPlayerRoomId = function(value) {
  jspb.Message.setField(this, 24, value);
};


/**
 * optional string player_server_ip = 25;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getPlayerServerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setPlayerServerIp = function(value) {
  jspb.Message.setField(this, 25, value);
};


/**
 * optional int32 player_server_port = 26;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getPlayerServerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setPlayerServerPort = function(value) {
  jspb.Message.setField(this, 26, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.HeartbeatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.HeartbeatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.HeartbeatRequest.displayName = 'proto.login.HeartbeatRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.HeartbeatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.HeartbeatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.HeartbeatRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.HeartbeatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerUuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    appUuid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.HeartbeatRequest}
 */
proto.login.HeartbeatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.HeartbeatRequest;
  return proto.login.HeartbeatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.HeartbeatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.HeartbeatRequest}
 */
proto.login.HeartbeatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.HeartbeatRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HeartbeatRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.HeartbeatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HeartbeatRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPlayerUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAppUuid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string player_uuid = 1;
 * @return {string}
 */
proto.login.HeartbeatRequest.prototype.getPlayerUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.login.HeartbeatRequest.prototype.setPlayerUuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.login.HeartbeatRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.HeartbeatRequest.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 app_uuid = 3;
 * @return {number}
 */
proto.login.HeartbeatRequest.prototype.getAppUuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.HeartbeatRequest.prototype.setAppUuid = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.HeartbeatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.HeartbeatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.HeartbeatResponse.displayName = 'proto.login.HeartbeatResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.HeartbeatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.HeartbeatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.HeartbeatResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.HeartbeatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.HeartbeatResponse}
 */
proto.login.HeartbeatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.HeartbeatResponse;
  return proto.login.HeartbeatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.HeartbeatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.HeartbeatResponse}
 */
proto.login.HeartbeatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.HeartbeatResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HeartbeatResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.HeartbeatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HeartbeatResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.login.HeartbeatResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.login.HeartbeatResponse.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.UserGoldRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.UserGoldRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.UserGoldRequest.displayName = 'proto.login.UserGoldRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.UserGoldRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.UserGoldRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.UserGoldRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.UserGoldRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerUuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    appUuid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.UserGoldRequest}
 */
proto.login.UserGoldRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.UserGoldRequest;
  return proto.login.UserGoldRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.UserGoldRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.UserGoldRequest}
 */
proto.login.UserGoldRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.UserGoldRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.UserGoldRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.UserGoldRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.UserGoldRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPlayerUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAppUuid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string player_uuid = 1;
 * @return {string}
 */
proto.login.UserGoldRequest.prototype.getPlayerUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.login.UserGoldRequest.prototype.setPlayerUuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.login.UserGoldRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.UserGoldRequest.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 app_uuid = 3;
 * @return {number}
 */
proto.login.UserGoldRequest.prototype.getAppUuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.UserGoldRequest.prototype.setAppUuid = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.UserGolgResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.UserGolgResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.UserGolgResponse.displayName = 'proto.login.UserGolgResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.UserGolgResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.UserGolgResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.UserGolgResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.UserGolgResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gold: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.UserGolgResponse}
 */
proto.login.UserGolgResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.UserGolgResponse;
  return proto.login.UserGolgResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.UserGolgResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.UserGolgResponse}
 */
proto.login.UserGolgResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.UserGolgResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.UserGolgResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.UserGolgResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.UserGolgResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getGold();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.UserGolgResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.UserGolgResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 gold = 2;
 * @return {number}
 */
proto.login.UserGolgResponse.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.UserGolgResponse.prototype.setGold = function(value) {
  jspb.Message.setField(this, 2, value);
};


